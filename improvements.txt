Submissions:

SUPERVISED
- submission1 (failed)
- submission 2
    = svm with 900 features (30 x 30 resizing), first 100 of each class (9045 training)
- submission 3
    = same as submission 2 but with full training
- submission 4
    = added additional feature of segmented width-to-height ratio
    = else, same as submission 3
- submission 5
    = width-height ratio from before
    = used computeFeatures.shape, computeFeatures.shape on resized image (13 features)
    = SVM
- submission 6
    = same as above, with computeFeatures.moment, computeFeatures.haralick, and 30 x 30 pixels
    = RBF (radial basis) kernel instead of linear
- submission 7
    = same features as above
    = h2o deep learning package, 3 layers of 50 nodes, max 100 epochs



SEMI SUPERVISED
- ideas (previously attempted submission 7)
    = same features as above
    = use semi-supervised learning
        * using bgmm package instead of EMCluster
        * also, use bagging (10000 training + 40000 testing for each bagging)
    = NONE of the semi-supervised packages in R are working, I'm going to export the data to csv and try using the Python s3vm here:
        http://www.uni-oldenburg.de/en/computingscience/ci/staff/fabian-gieseke/code/
         that link doens't even freaking work
        - submission 7
            = run kmeans on testing, with present centers (centers for each training)
            = P(x_i in class j) = (1 / dist(x_i, center_j)) / (1 / dist(x_i, center_1) + 1 / dist(x_i, center_2) + ...)
        - kmeans is taking forever, it's been running for 15 hours.  i'll give it another 8 hours ish and if it hasn't finished, I'll use h2o only and try deep learning

        
- submission 8
    = h2o
        * http://www.r-bloggers.com/things-to-try-after-user-part-1-deep-learning-with-h2o/
- submission 9
    = use ensemble
        - average probabilities of best pure supervised SVM (submission 6), semi-supervised (EMCluster or bgmm, whichever does better), and deep learning (h2o)


----------------
= next ideas:
    * low-pass (removes noise, blurs image)
        - filter2, gblur
    * high-pass (keeps the edges)
        - filter2
    * medianFilter
    * weighted SVM with boosting
        - http://cran.r-project.org/web/packages/wSVM/wSVM.pdf
    * use semi-supervised learning
    * use R-h2o for s3vm
    ???
= run clustering algorithm on the unlabeled testing set
    * mclust?
= get probabilities from that clustering algorithm
    * note, must figure out mapping from classes to clusters
= somehow average the probabilities produced by the supervised SVM on testing set, and the probabilities produced by the clustering on the testing set